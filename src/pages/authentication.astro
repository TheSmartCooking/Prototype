---
import '../styles/global.css'
import Main from '../layouts/Main.astro'
import FormField from '../components/FormField.astro'
import PasswordField from '../components/PasswordField.astro'
import PasswordRequirements from '../components/PasswordRequirements.astro'
---

<Main title="Authentication">
    <div id="authentication">
        <section id="login">
            <h2>Login</h2>
            <form action="#">
                <FormField id="login-username" type="text" name="login-username" label="Username" />
                <PasswordField id="login-password" name="login-password" label="Password" />
                <button type="submit">Login</button>
            </form>

            <a href="" id="register-link">
                Don't have an account? <span class="flip-link">Register</span>
            </a>
        </section>

        <section id="register" style="display: none;">
            <h2>Register</h2>
            <form action="#">
                <FormField id="register-uname" type="text" name="register-uname" label="Username" />
                <FormField id="register-email" type="email" name="register-email" label="E-mail" />
                <PasswordField id="register-password" name="register-password" label="Password" />
                <PasswordField
                    id="register-password-confirm"
                    name="register-password-confirm"
                    label="Password confirmation"
                />

                <PasswordRequirements />
                <button type="submit">Register</button>
            </form>

            <a href="" id="login-link">
                Already have an account? <span class="flip-link">Login</span>
            </a>
        </section>
    </div>
</Main>

<style>
    .flip-link {
        font-weight: bold;
    }

    #authentication {
        align-items: center;
        display: flex;
        justify-content: center;
        height: 100%;
        width: 100%;
    }

    /* Pseudo-classes */

    @media screen and (width<=500px) {
        section {
            border-radius: 0;
        }
    }
</style>

<script type="module" is:inline>
    const loginSection = document.getElementById('login')
    const registerSection = document.getElementById('register')
    const loginLink = document.getElementById('register-link')
    const registerLink = document.getElementById('login-link')
    const passwordInput = document.getElementById('register-password')

    // Maintain label position on filled inputs
    document.querySelectorAll('.form-field input').forEach((input) => {
        const updateFilled = () => {
            input.classList.toggle('filled', input.value.trim() !== '')
        }

        input.addEventListener('input', updateFilled)
        input.addEventListener('blur', updateFilled)

        updateFilled()
    })

    // Flip between login and register forms
    loginLink.addEventListener('click', (e) => {
        e.preventDefault()
        loginSection.style.display = 'none'
        registerSection.style.display = 'flex'
    })

    registerLink.addEventListener('click', (e) => {
        e.preventDefault()
        registerSection.style.display = 'none'
        loginSection.style.display = 'flex'
    })

    // Toggle visibility for password fields
    document.querySelectorAll('.icons').forEach((iconContainer) => {
        const section = iconContainer.closest('section')
        const passwordInputs = section.querySelectorAll(
            'input[type="password"], input[type="text"]'
        )
        const showIcons = section.querySelectorAll('.show-password')
        const hideIcons = section.querySelectorAll('.hide-password')

        const toggle = () => {
            const isHidden = [...passwordInputs].some((input) => input.type === 'password')
            passwordInputs.forEach((input) => {
                input.type = isHidden ? 'text' : 'password'
            })
            showIcons.forEach((icon) => {
                icon.style.display = isHidden ? 'none' : 'inline'
            })
            hideIcons.forEach((icon) => {
                icon.style.display = isHidden ? 'inline' : 'none'
            })
        }

        iconContainer.addEventListener('click', toggle)
    })

    passwordInput.addEventListener('input', () => {
        const password = passwordInput.value
        const requirements = [
            { regex: /.{12,}/, index: 0 },
            { regex: /[A-Z]/, index: 1 },
            { regex: /[a-z]/, index: 2 },
            { regex: /\d/, index: 3 },
            { regex: /[^a-zA-Z0-9]/, index: 4 },
        ]

        requirements.forEach(({ regex, index }) => {
            const isValid = regex.test(password)
            const checkIcon = document.querySelectorAll('.password-requirement-check')[index]
            const xIcon = document.querySelectorAll('.password-requirement-x')[index]

            checkIcon.style.display = isValid ? 'inline' : 'none'
            xIcon.style.display = isValid ? 'none' : 'inline'
        })
    })
</script>
